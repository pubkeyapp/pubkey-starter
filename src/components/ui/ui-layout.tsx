import { WalletButton } from '@/components/solana/solana-provider.tsx'
import { useIsDark, useIsMobile } from '@/components/ui'
import {
  ActionIcon,
  Alert,
  Anchor,
  Box,
  Button,
  Container,
  Flex,
  Group,
  Image,
  Loader,
  Modal,
  rem,
  Stack,
  Text,
  Title,
  useMantineTheme,
} from '@mantine/core'
import { IconAlertCircle, IconRefresh } from '@tabler/icons-react'
import { ReactNode, Suspense } from 'react'
import { Link, useLocation } from 'react-router-dom'

import { AccountChecker } from '../account/account-ui'
import { ClusterChecker, ClusterUiSelect } from '../cluster/cluster-ui'

export function UiLayout({ children, links }: { children: ReactNode; links: { label: string; path: string }[] }) {
  return (
    <Flex direction="column" h="100%" justify="stretch" style={{ overflow: 'auto' }}>
      <UiHeader links={links} />
      <Box style={{ flexGrow: 1 }}>
        <ClusterChecker>
          <AccountChecker />
        </ClusterChecker>
        <Container>
          <Suspense fallback={<Loader type="dots" my="xl" size="xl" />}>{children}</Suspense>
        </Container>
      </Box>
      <UiFooter />
    </Flex>
  )
}

export function UiAlert({
  icon = <IconAlertCircle />,
  refresh,
  refreshIcon = <IconRefresh size={12} />,
  title,
}: {
  icon?: ReactNode
  refresh: () => void
  refreshIcon?: ReactNode
  title: ReactNode
}) {
  return (
    <Alert
      icon={icon}
      color="yellow"
      title={
        <Group gap="xs">
          <Text span size="sm">
            {title}
          </Text>
          <ActionIcon color="yellow" variant="light" size="xs" onClick={refresh}>
            {refreshIcon}
          </ActionIcon>
        </Group>
      }
    />
  )
}

export function AppModal({
  children,
  title,
  hide,
  show,
  submit,
  submitDisabled,
  submitLabel,
}: {
  children: ReactNode
  title: string
  hide: () => void
  show: boolean
  submit?: () => void
  submitDisabled?: boolean
  submitLabel?: string
}) {
  return (
    <Modal opened={show} onClose={hide} title={title}>
      <Stack>
        {children}
        <Group justify="end" w="100%">
          {submit ? (
            <Button onClick={submit} disabled={submitDisabled}>
              {submitLabel || 'Save'}
            </Button>
          ) : null}
          <Button onClick={hide} variant="default">
            Close
          </Button>
        </Group>
      </Stack>
    </Modal>
  )
}

export function AppHero({
  children,
  title,
  subtitle,
}: {
  children?: ReactNode
  title: ReactNode
  subtitle: ReactNode
}) {
  return (
    <Box py={64}>
      <Container size="sm" ta="center">
        {typeof title === 'string' ? <Title>{title}</Title> : title}
        {typeof subtitle === 'string' ? <Text py="lg">{subtitle}</Text> : subtitle}
        {children}
      </Container>
    </Box>
  )
}

export function UiHeader({ links }: { links: { label: string; path: string }[] }) {
  const isDark = useIsDark()
  const isMobile = useIsMobile()
  const pathname = useLocation().pathname
  const theme = useMantineTheme()

  const items = links.map((link) => {
    const isActive = pathname.startsWith(link.path)
    return (
      <Anchor
        key={link.label}
        component={Link}
        to={link.path}
        bg={isActive ? 'var(--mantine-color-brand-filled)' : undefined}
        data-active={isActive}
        fw={500}
        fz="sm"
        c={isActive ? theme.white : isDark ? theme.colors.dark[0] : theme.colors.gray[7]}
        p={`${rem('8px')} ${rem('12px')}`}
        style={{
          lineHeight: 1,
          borderRadius: 'var(--mantine-radius-sm)',
          textDecoration: 'none',
        }}
      >
        {link.label}
      </Anchor>
    )
  })

  return (
    <header
      style={{
        backgroundColor: isDark ? theme.colors.dark[8] : theme.colors.gray[2],
        borderBottom: `${rem('1px')} solid ${isDark ? theme.colors.dark[6] : theme.colors.gray[3]}`,
      }}
    >
      <Container
        fluid
        style={{
          display: 'flex',
          flexDirection: isMobile ? 'column' : 'row',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <Group wrap="nowrap" py="xs">
          <Link to="/">
            <Image w={150} alt="Logo" src="/logo.png" />
          </Link>
          <Group gap="xs" wrap="nowrap">
            {items}
          </Group>
        </Group>
        <Group wrap="nowrap" py="xs">
          <WalletButton />
          <ClusterUiSelect />
        </Group>
      </Container>
    </header>
  )
}

export function UiFooter() {
  const isDark = useIsDark()

  const theme = useMantineTheme()

  return (
    <Box
      component="footer"
      p="xs"
      style={{
        backgroundColor: isDark ? theme.colors.dark[8] : theme.colors.gray[2],
        textAlign: 'center',
        borderTop: `${rem('1px')} solid ${isDark ? theme.colors.dark[6] : theme.colors.gray[3]}`,
      }}
    >
      <Text size="xs">
        Generated by{' '}
        <Anchor
          c="white"
          href="https://github.com/solana-developers/create-solana-dapp"
          target="_blank"
          rel="noopener noreferrer"
        >
          create-solana-dapp
        </Anchor>
      </Text>
    </Box>
  )
}
